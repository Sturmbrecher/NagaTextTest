<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Naga Trigger Overlay</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'razer-green': '#10b981', // Emerald 500
                        'razer-dark': '#111827',   // Gray 900
                        'razer-light': '#374151',  // Gray 600
                    },
                }
            }
        }
    </script>
    <style>
        /* Custom font */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            /* Minimal padding for small window size */
            padding: 0.5rem; 
            background-color: #0d0d0d;
        }

        /* Styling for Naga keys */
        .naga-key {
            transition: all 0.1s ease-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.4);
            /* Small key text size adjustment for overlay mode */
            height: 4rem; 
        }

        .naga-key:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(16, 185, 129, 0.5); /* Green shimmer on hover */
        }

        .naga-key:active {
            transform: translateY(0);
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
            background-color: #065f46; /* Darker click */
        }

        /* Style for active key on key press */
        .active-key {
            transform: scale(0.95);
            border: 2px solid #10b981;
            box-shadow: 0 0 10px #10b981;
        }
        
        /* Make content align top-center for overlay mode */
        .min-h-screen {
            min-height: auto;
        }
    </style>
</head>
<body class="p-2 flex items-start justify-center">

    <!-- Minimal Overlay Container -->
    <div class="mx-auto w-full max-w-xs bg-razer-dark p-2 rounded-xl shadow-2xl border border-razer-light">
        
        <!-- Status Message (Feedback is crucial in overlay mode) -->
        <div id="status-message" class="text-center p-2 mt-1 mb-3 hidden rounded-lg text-xs font-semibold text-white transition-opacity duration-300">
            <!-- Messages are inserted dynamically here -->
        </div>

        <!-- Naga Mouse Outline Container (The "Frame") - Extremely Compact -->
        <div class="mx-auto p-4 bg-[#000000] rounded-[2rem] border-2 border-razer-green shadow-[0_0_15px_rgba(16,185,129,0.5)]">
            <p class="text-center text-gray-500 text-xs mb-3 uppercase tracking-wider">Naga Side Panel</p>
            
            <!-- Naga Key Layout (Fixed 3x4 Grid enforced by grid-cols-3) -->
            <div id="naga-grid" class="grid grid-cols-3 gap-3">
                <!-- Keys are inserted dynamically via JavaScript -->
            </div>
        </div>

        <!-- === GEMINI API INTEGRATION === -->
        <div class="mt-4 pt-3 border-t border-razer-light/50">
            <h3 class="text-xs font-bold text-razer-green mb-2 uppercase text-center tracking-wider">
                KI-Erweiterung (Gemini)
            </h3>
            
            <button id="gemini-trigger" class="w-full bg-razer-green/80 hover:bg-razer-green text-black font-bold py-2 px-3 rounded-lg text-sm transition duration-150 shadow-md flex items-center justify-center" onclick="generateEnhancedSnippet()">
                <span id="gemini-button-text">✨ Professionellen Gruß generieren (Basis: Taste 1)</span>
                <span id="gemini-spinner" class="hidden ml-2 h-4 w-4 border-2 border-t-2 border-razer-dark rounded-full animate-spin border-t-white"></span>
            </button>
            
            <!-- Output Area -->
            <div id="gemini-output-container" class="mt-3 p-3 bg-razer-light/50 rounded-lg hidden">
                <p class="text-xs font-semibold text-gray-300 mb-1">Generierter Text:</p>
                <textarea id="gemini-output" class="w-full text-xs bg-razer-dark text-gray-100 p-2 rounded-md border border-razer-light focus:outline-none focus:border-razer-green" rows="4" readonly></textarea>
                <button onclick="copyGeminiOutput()" class="mt-2 w-full bg-razer-dark hover:bg-razer-light text-razer-green text-xs font-semibold py-1 rounded-md transition duration-150">
                    Kopieren
                </button>
            </div>
        </div>
        <!-- ============================== -->
        
    </div>

    <script>
        // ======================================================
        // YOUR PHRASES (The configuration "file")
        // Edit this array to customize your snippets.
        // The 'key' corresponds to the number on the Naga mouse and the keyboard.
        // ======================================================
        const PHRASE_DATA = [
            { key: 1, label: "1 | E-Mail-Gruß (KI-Basis)", snippet: "Hallo {Name},\n\nich hoffe, diese Nachricht erreicht Sie gut." },
            { key: 2, label: "2 | Status OK", snippet: "Status: Grüne Ampel. Keine Blocker gemeldet. Läuft nach Plan." },
            { key: 3, label: "3 | Bug gefunden", snippet: "ACHTUNG: Ein kritischer Bug wurde in Modul X festgestellt (siehe Jira #1234)." },
            { key: 4, label: "4 | Meeting Start", snippet: "Das Meeting beginnt in 5 Minuten. Hier ist der Link: [Link]" },
            { key: 5, label: "5 | Gruß & Abgang", snippet: "Vielen Dank und bis bald,\nMax Mustermann" },
            { key: 6, label: "6 | Code-Snippet", snippet: "console.log('Operation erfolgreich abgeschlossen.');" },
            { key: 7, label: "7 | Fragen?", snippet: "Haben Sie dazu noch Fragen oder benötigen Sie weitere Details?" },
            { key: 8, label: "8 | Terminanfrage", snippet: "Ich schlage Dienstag, den 15. um 14:00 Uhr vor. Passt das?" },
            { key: 9, label: "9 | Entschuldigung", snippet: "Entschuldigen Sie die verspätete Antwort. Hier die Infos:" },
            { key: 10, label: "0 | Dringend!", snippet: "[DRINGEND] Bitte sofort prüfen!" },
            { key: 11, label: "- | Mittagspause", snippet: "Bin in der Mittagspause (bis ca. 13:00 Uhr) und schaue danach wieder rein." },
            { key: 12, label: "= | Projekt-Link", snippet: "Hier ist der Link zum aktuellen Projekt-Board: https://projekt-board.de/p12345" },
        ];

        // Map physical keyboard keys to Naga key numbers (1-12)
        const KEY_MAP = {
            '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6,
            '7': 7, '8': 8, '9': 9, '0': 10, '-': 11, '=': 12
        };

        const statusMessage = document.getElementById('status-message');
        const nagaGrid = document.getElementById('naga-grid');
        const geminiOutput = document.getElementById('gemini-output');
        const geminiOutputContainer = document.getElementById('gemini-output-container');
        const geminiButtonText = document.getElementById('gemini-button-text');
        const geminiSpinner = document.getElementById('gemini-spinner');
        const geminiTriggerButton = document.getElementById('gemini-trigger');

        // API Configuration (Leave API key empty, will be provided by Canvas runtime)
        const API_KEY = "";
        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
        const MODEL = "gemini-2.5-flash-preview-05-20";

        // ======================================================
        // CORE FUNCTIONS
        // ======================================================

        /**
         * Copies the given text to the clipboard and shows a status message.
         * @param {string} text - The text to copy.
         * @param {number} keyLabel - The key number (for the status message).
         */
        function copyToClipboard(text, keyLabel) {
            try {
                const tempInput = document.createElement('textarea');
                tempInput.value = text;
                document.body.appendChild(tempInput);
                
                tempInput.select();
                document.execCommand('copy');
                
                document.body.removeChild(tempInput);
                
                showStatusMessage(`Erfolg! Taste ${keyLabel} kopiert.`, 'bg-razer-green/80');

            } catch (err) {
                console.error('Copy failed:', err);
                showStatusMessage('Fehler beim Kopieren.', 'bg-red-700');
            }
        }

        /**
         * Copies the content from the Gemini output area.
         */
        function copyGeminiOutput() {
            copyToClipboard(geminiOutput.value, 'KI');
        }


        /**
         * Shows a temporary status message.
         */
        function showStatusMessage(message, bgColorClass) {
            statusMessage.textContent = message;
            statusMessage.className = `text-center p-2 mt-1 mb-3 rounded-lg text-xs font-semibold text-white transition-opacity duration-300 ${bgColorClass}`;
            statusMessage.style.display = 'block';

            clearTimeout(window.statusTimer);
            window.statusTimer = setTimeout(() => {
                statusMessage.style.display = 'none';
            }, 3000);
        }

        /**
         * Creates the visual buttons based on the data.
         */
        function initializeGrid() {
            PHRASE_DATA.forEach(data => {
                const button = document.createElement('button');
                button.id = `key-${data.key}`;
                button.setAttribute('data-key', data.key);
                button.className = 'naga-key p-2 bg-razer-light hover:bg-razer-green/70 text-white rounded-lg flex flex-col items-center text-left';
                button.onclick = () => {
                    copyToClipboard(data.snippet, data.key);
                };

                const keyNumber = document.createElement('span');
                keyNumber.className = 'text-base font-extrabold text-razer-green leading-none self-start';
                keyNumber.textContent = data.key;

                const keyLabel = document.createElement('span');
                keyLabel.className = 'text-[0.6rem] font-semibold text-gray-100 mt-1 self-start';
                keyLabel.textContent = data.label.split('|')[1]?.trim() || data.label;

                const keySnippet = document.createElement('p');
                keySnippet.className = 'text-[0.6rem] text-gray-400 mt-1 truncate w-full self-start';
                keySnippet.textContent = data.snippet;

                button.appendChild(keyNumber);
                button.appendChild(keyLabel);
                button.appendChild(keySnippet);
                nagaGrid.appendChild(button);
            });
        }
        
        /**
         * Handles keyboard presses to trigger the snippets.
         */
        document.addEventListener('keydown', (event) => {
            const key = event.key;
            const nagaKey = KEY_MAP[key];

            if (nagaKey) {
                event.preventDefault(); // Prevent default browser actions

                const data = PHRASE_DATA.find(p => p.key === nagaKey);
                if (data) {
                    copyToClipboard(data.snippet, data.key);
                    
                    // Visual feedback
                    const buttonElement = document.getElementById(`key-${nagaKey}`);
                    if (buttonElement) {
                        buttonElement.classList.add('active-key');
                        setTimeout(() => {
                            buttonElement.classList.remove('active-key');
                        }, 150);
                    }
                }
            }
        });


        // ======================================================
        // GEMINI API FUNCTIONS
        // ======================================================

        /**
         * Performs an API fetch call with exponential backoff for resilience.
         * @param {string} url - The API URL.
         * @param {object} options - Fetch options (method, headers, body).
         * @param {number} retries - Current retry count.
         * @returns {Promise<Response>} The fetch response.
         */
        async function fetchWithBackoff(url, options, retries = 0) {
            const MAX_RETRIES = 5;
            try {
                const response = await fetch(url, options);
                if (response.status === 429 && retries < MAX_RETRIES) {
                    const delay = Math.pow(2, retries) * 1000;
                    await new Promise(resolve => setTimeout(resolve, delay));
                    return fetchWithBackoff(url, options, retries + 1);
                }
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response;
            } catch (error) {
                if (retries < MAX_RETRIES) {
                    const delay = Math.pow(2, retries) * 1000;
                    await new Promise(resolve => setTimeout(resolve, delay));
                    return fetchWithBackoff(url, options, retries + 1);
                }
                throw error;
            }
        }

        /**
         * Triggers the Gemini API to generate an enhanced, professional email greeting
         * based on the content of Key 1.
         */
        async function generateEnhancedSnippet() {
            // Find the snippet from key 1
            const baseSnippet = PHRASE_DATA.find(p => p.key === 1)?.snippet || "Hallo,\nich hoffe, es geht Ihnen gut.";
            
            // Set loading state
            geminiTriggerButton.disabled = true;
            geminiButtonText.textContent = "Generiere...";
            geminiSpinner.classList.remove('hidden');
            geminiOutputContainer.classList.add('hidden');
            geminiOutput.value = '';
            showStatusMessage('Sende Anfrage an Gemini...', 'bg-razer-green/50');


            const systemPrompt = "Du bist ein professioneller E-Mail-Assistent. Erweitere den bereitgestellten Begrüßungssatz zu einer höflichen, umfassenden und professionellen Eröffnung für eine Geschäftsemail, in der ein Folgetermin vereinbart werden soll. Nutze eine formelle Anrede und ersetze Platzhalter wie {Name} durch die entsprechende Anrede (z.B. 'Herr Mustermann').";
            
            const userQuery = `Erweitere diese Begrüßung: "${baseSnippet}"`;

            const payload = {
                contents: [{ parts: [{ text: userQuery }] }],
                systemInstruction: { parts: [{ text: systemPrompt }] },
            };

            try {
                const response = await fetchWithBackoff(API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                const generatedText = result.candidates?.[0]?.content?.parts?.[0]?.text;

                if (generatedText) {
                    geminiOutput.value = generatedText;
                    geminiOutputContainer.classList.remove('hidden');
                    showStatusMessage('KI-Text erfolgreich generiert!', 'bg-razer-green');
                } else {
                    geminiOutput.value = 'Fehler: Die KI konnte keinen Text generieren. Bitte versuchen Sie es später erneut.';
                    geminiOutputContainer.classList.remove('hidden');
                    showStatusMessage('Generierungsfehler.', 'bg-red-700');
                }

            } catch (error) {
                console.error('Gemini API Error:', error);
                geminiOutput.value = `API-Verbindungsfehler: ${error.message}`;
                geminiOutputContainer.classList.remove('hidden');
                showStatusMessage('Kritischer Fehler bei der API-Anfrage.', 'bg-red-700');
            } finally {
                // Reset loading state
                geminiTriggerButton.disabled = false;
                geminiButtonText.textContent = "✨ Professionellen Gruß generieren (Basis: Taste 1)";
                geminiSpinner.classList.add('hidden');
            }
        }

        // Start the application
        document.addEventListener('DOMContentLoaded', initializeGrid);
    </script>
</body>
</html>
